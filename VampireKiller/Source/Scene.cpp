
#include "Scene.h"
#include "Globals.h"
#include <stdio.h>
#include "TileMap.h"
Player* Scene::GetPlayer()const
{
	return player;
}

Scene::Scene()
{
	player = nullptr;
	level = nullptr;
	font = nullptr;
	enemies = nullptr;
	shots = nullptr;

	camera.target = { 0, 0 };				//Center of the screen
	camera.offset = { 0, MARGIN_GUI_Y };	//Offset from the target (center of the screen)
	camera.rotation = 0.0f;					//No rotation
	camera.zoom = 1.0f;						//Default zoom

	debug = DebugMode::OFF;

	data.LoadMusic(ResourceAudio::MUSIC_PROLOGUE, "Images/Prologue.mp3", true);
	data.LoadMusic(ResourceAudio::MUSIC_VAMPIREKILLER, "Images/VampireKiller.mp3", true);
	data.LoadMusic(ResourceAudio::MUSIC_STARKER, "Images/Starker.mp3", true);
	data.LoadMusic(ResourceAudio::MUSIC_BOSS, "Images/PoisonMind.mp3", true);
	data.LoadMusic(ResourceAudio::MUSIC_ENDING, "Images/Ending.mp3", true);
	data.LoadMusic(ResourceAudio::MUSIC_GAMEOVER, "Images/GameOver.mp3", false);

	dst = {};
}
Scene::~Scene()
{
	if (player != nullptr)
	{
		player->Release();
		delete player;
		player = nullptr;
	}

	if (enemies != nullptr)
	{
		enemies->Release();
		delete enemies;
		enemies = nullptr;
	}
	if (level != nullptr)
	{
		level->Release();
		delete level;
		level = nullptr;
	}
	if (font != nullptr)
	{
		delete font;
		font = nullptr;
	}
	for (Entity* obj : objects)
	{
		delete obj;
	}
	objects.clear();
	for (Entity* obj : objects2)
	{
		delete obj;
	}
	objects2.clear();
}
AppStatus Scene::Init()
{
	//Create player
	player = new Player({ 0,0 }, State::IDLE, Look::RIGHT);
	if (player == nullptr)
	{
		LOG("Failed to allocate memory for Player");
		return AppStatus::ERROR;
	}
	//Initialise player
	if (player->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Player");
		return AppStatus::ERROR;
	}
	//Create enemy manager
	enemies = new EnemyManager();
	if (enemies == nullptr)
	{
		LOG("Failed to allocate memory for Enemy Manager");
		return AppStatus::ERROR;
	}
	//Initialise enemy manager
	if (enemies->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Enemy Manager");
		return AppStatus::ERROR;
	}

	//Create shot manager 
	shots = new ShotManager();
	if (shots == nullptr)
	{
		LOG("Failed to allocate memory for Shot Manager");
		return AppStatus::ERROR;
	}
	//Initialise shot manager
	if (shots->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Shot Manager");
		return AppStatus::ERROR;
	}
	//Create text font 
	font = new Text();
	if (font == nullptr)
	{
		LOG("Failed to allocate memory for font 1");
		return AppStatus::ERROR;
	}
	//Initialise text font 1
	if (font->Initialise(ResourceImages::IMG_FONT, "images/font8x8.png", ' ', 8) != AppStatus::OK)
	{
		LOG("Failed to initialise Level");
		return AppStatus::ERROR;
	}
	//Create enemy

	//Initialise player


	//init fire

	//Create level 
	level = new TileMap();
	if (level == nullptr)
	{
		LOG("Failed to allocate memory for Level");
		return AppStatus::ERROR;
	}
	//Initialise level
	if (level->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Level");
		return AppStatus::ERROR;
	}

	//Load level
	if (LoadLevel(1) != AppStatus::OK)
	{
		LOG("Failed to load Level 1");
		return AppStatus::ERROR;
	}
	//Assign the tile map reference to the player to check collisions while navigating
	player->SetTileMap(level);
	//Assign the tile map reference to the shot manager to check collisions when shots are shot
	shots->SetTileMap(level);
	//Assign the shot manager reference to the enemy manager so enemies can add shots
	enemies->SetShotManager(shots);


	return AppStatus::OK;
}
AppStatus Scene::LoadLevel(int stage)
{
	int size;
	int x, y, i;
	Tile tile;
	Tile tile2;
	Point pos;
	int* map = nullptr;
	int* map2 = nullptr;
	Object* obj;
	AABB hitbox, area, areaT;

	


	ClearLevel();

	size = LEVEL_WIDTH * LEVEL_HEIGHT;
	if (stage == 0)
	{
		//load cinematic image
	}
	if (stage == 1)
	{
		map = new int[size] {

			38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				18, 16, 15, 14, 17, 19, 18, 21, 18, 19, 20, 21, 17, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				10, 11, 75, 76, 0, 12, 10, 12, 10, 12, 10, 251, 0, 12, 10, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				3, 250, 73, 74, 201, 250, 4, 250, 4, 250, 4, 250, 201, 250, 3, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				2, 2, 70, 71, 72, 2, 2, 2, 2, 2, 2, 2, 72, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->InitScore();
		player->SetStage(1);



	}
	else if (stage == 2)
	{
		map = new int[size] {


			38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				18, 16, 15, 14, 17, 19, 18, 21, 18, 19, 20, 21, 17, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				10, 11, 75, 76, 0, 12, 10, 12, 10, 12, 10, 251, 0, 12, 10, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				3, 250, 73, 74, 201, 250, 4, 250, 4, 250, 4, 250, 201, 250, 3, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				309, 2, 70, 71, 72, 2, 2, 2, 2, 2, 2, 2, 72, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0,404,0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(2);


	}
	else if (stage == 3)
	{
		map = new int[size] {

			38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 42, 43, 44, 43, 44, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 50, 46, 47, 48, 48, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 50, 51, 52, 53, 48, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 50, 55, 56, 300, 57, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 50, 58, 59, 300, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				18, 16, 15, 14, 17, 19, 18, 21, 18, 19, 50, 55, 56, 300, 57, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				10, 11, 75, 76, 0, 12, 10, 12, 10, 12, 50, 58, 59, 300, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				3, 250, 73, 74, 201, 250, 4, 250, 4, 250, 62, 63, 64, 300, 65, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				310, 2, 70, 71, 72, 2, 2, 2, 2, 2, 62, 63, 64, 300, 65, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(3);


	}
	else if (stage == 4)
	{
		map = new int[size] {

			-3, -3, -3, -3, 81, 81, 86, 87, 88, 89, 81, 81, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 96, 97, 86, 87, 92, 93, 96, 97, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 98, 99, 86, 87, 81, 95, 98, 99, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 81, 81, 86, 87, 90, 91, 81, 81, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 81, 81, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 81, 81, 86, 87, 81, 81, 81, 81, 86, 87, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 81, 81, 86, 87, 81, 81, 81, 81, 86, 87, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				92, 93, 81, 81, 96, 97, 86, 87, 81, 81, 81, 81, 86, 87, 81, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				306, 95, 81, 81, 98, 99, 86, 87, 81, 81, -3, -3, 86, 87, 81, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				88, 89, 81, 81, 90, 91, 86, 87, 81, 81, 90, 91, 86, 87, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 80, 80, 80, 80, 80, 80, 80, 80, 80
			};
		map2 = new int[size] {


			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0,401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(4);

	}
	else if (stage == 5)
	{
		map = new int[size] {

			-3, -3, 86, 87, 100, 101, 81, 81, 110, 81, -3, -3, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 81, 81, 81, 110, 96, 97, -3, -3, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 81, 81, 110, 81, 98, 99, -3, -3, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 81, 110, 90, 91, 81, 81, -3, -3, 90, 91, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, 120, -3, -3, -3, 88, 89, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				92, 93, 86, 87, 81, 81, 81, 110, 81, 81, -3, -3, 88, 89, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				94, 95, 86, 87, 81, 81, 110, 81, 81, 81, -3, -3, -3, -3, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				96, 97, 86, 87, 81, 110, 90, 91, 96, 97, -3, -3, 92, 93, 86, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				304, 99, 86, 87, 110, 81, 88, 89, 98, 99, -3, -3, 94, 95, 86, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				90, 91, 86, 110, 81, 81, 88, 92, 90, 91, -3, -3, 81, 81, 86, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 80, 80, 80, 80, 80, 80, 80, 80, 80
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0,401, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(5);

	}
	else if (stage == 6)
	{
		map = new int[size] {

			88, 89, 81, 81, 110, 81, -3, -3, 81, 81, 94, 95, 110, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				92, 93, 81, 110, 81, 81, -3, -3, 96, 97, 81, 110, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				94, 95, 110, 81, 81, 81, -3, -3, 98, 99, 110, 81, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 110, 90, 91, 81, 81, -3, -3, 81, 110, 81, 81, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 81, 81, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				92, 93, 81, 81, 86, 87, 92, 93, 81, 81, 81, 81, 88, 89, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				94, 95, 81, 81, 86, 87, 94, 95, 81, 81, 120, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				305, 81, 81, 81, 86, 87, 81, 81, 81, 110, 90, 91, 81, 81, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				305, 81, -3, -3, 86, 87, 81, 81, 110, 81, 88, 89, 81, 81, 98, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				305, 81, 90, 91, 86, 87, 81, 110, 81, 81, 88, 89, 81, 81, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 80, 80, 80, 80, 80, 80, 80, 80, 80
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 200,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(6);

	}

	else if (stage == 7)
	{
		map = new int[size] {

			-3, -3, 81, 81, 81, 81, 86, 87, 81, 81, 94, 95, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 96, 97, 81, 81, 86, 87, 96, 97, 81, 81, 86, 87, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 98, 99, 81, 81, 86, 87, 98, 99, 81, 81, 86, 87, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 90, 91, 81, 81, 86, 87, 81, 81, 81, 81, 86, 87, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 88, 89, 81, 81, -3, -3, -3, -3, 81, 81, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 88, 92, 81, 81, 81, 81, -3, -3, 81, 81, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, -3, -3, 81, 81, 81, 81, -3, -3, 81, 81, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 92, 93, 81, 81, 81, 81, -3, -3, 106, 107, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 94, 95, 81, 81, -3, -3, -3, -3, 100, 101, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 90, 91, 81, 81, 92, 93, -3, -3, 81, 81, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 81, 81, 94, 95, -3, -3, 81, 81, 86, 87, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(7);

	}
	else if (stage == 8)
	{
		map = new int[size] {

			94, 95, 81, 81, 86, 87, 100, 101, 81, 81, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 96, 97, 86, 87, 90, 91, 96, 97, 81, 81, 86, 87, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 98, 99, 86, 87, 88, 89, 98, 99, 81, 81, 86, 87, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 90, 91, 86, 87, 92, 93, 90, 91, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 88, 89, 86, 87, 94, 95, -3, -3, 81, 81, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 88, 92, 86, 87, 81, 81, 81, 81, 90, 91, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, -3, -3, 86, 87, 81, 81, 81, 81, -3, -3, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 92, 93, 86, 87, 90, 91, 96, 97, 106, 107, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 94, 95, -3, -3, -3, -3, 98, 99, 100, 101, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 81, 81, 86, 87, 92, 93, 81, 81, 81, 81, 92, 93, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 81, 81, 86, 87, 94, 95, 120, -3, -3, -3, 94, 95, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(8);

	}
	else if (stage == 9)
	{
		map = new int[size] {

			88, 89, 86, 87, 81, 81, 94, 95, 81, 81, 86, 87, 94, 95, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				106, 107, 86, 87, 96, 97, 81, 81, 96, 97, 86, 87, 96, 97, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				100, 101, 86, 87, 98, 99, 81, 81, 98, 99, 86, 87, 98, 99, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 81, 81, 81, 81, 81, 81, 86, 87, 90, 91, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, -3, -3, -3, -3, 81, 81, 86, 87, 88, 89, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 86, 87, 92, 93, 81, 81, 81, 81, 86, 87, 92, 93, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 86, 87, 94, 95, 81, 81, 120, -3, 86, 87, 94, 95, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 86, 87, 96, 97, 81, 110, 90, 91, 86, 87, 96, 97, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 98, 99, 110, 81, 88, 89, -3, -3, 98, 99, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 86, 87, 81, 110, 81, 81, 106, 107, 86, 87, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, 81, 86, 87, 110, 81, -3, -3, 100, 101, 86, 87, 120, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(9);

	}
	else if (stage == 10)
	{
		map = new int[size] {

			-3, -3, 81, 81, 110, 81, 86, 87, 94, 95, 81, 81, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 110, 96, 97, 86, 87, 96, 97, 81, 81, 96, 97, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 98, 99, 86, 87, 98, 99, -3, -3, 98, 99, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 81, 81, 86, 87, 90, 91, 81, 81, 90, 91, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 81, 81, 88, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 0, 0, 86, 87, 0, 0, -3, -3, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 98, 99, 86, 87, 98, 99, 86, 87, 98, 99, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 90, 91, 86, 87, 106, 107, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 88, 89, 86, 87, 100, 101, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(10);

	}
	else if (stage == 11)
	{
		map = new int[size] {

			81, 81, 88, 89, 81, 81, 94, 95, 81, 81, 88, 89, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				96, 97, 88, 89, 96, 97, 81, 81, 96, 97, 92, 93, 96, 97, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				98, 99, -3, -3, 98, 99, 81, 81, 98, 99, 94, 95, 98, 99, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 92, 93, 90, 91, 81, 81, 81, 81, 81, 81, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 94, 95, -3, -3, 81, 81, 81, -3, -3, 81, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 0, 0, -3, -3, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				98, 99, 86, 87, 98, 99, 86, 87, 98, 99, -3, -3, 98, 99, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(11);

	}
	else if (stage == 12)
	{
		map = new int[size] {

			94, 95, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				98, 99, 86, 87, 98, 99, 86, 87, 98, 99, 86, 87, 98, 99, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 88, 89, 86, 87, 81, 81, 86, 87, 90, 91, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, 96, 97, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				98, 99, 86, 87, 98, 99, 86, 87, 98, 99, 86, 87, 98, 99, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				92, 93, 86, 87, 90, 91, 86, 87, 81, 81, 86, 87, 90, 91, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				94, 95, 86, 87, 88, 89, 86, 87, 81, 81, 86, 87, 88, 89, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(12);

	}
	else if (stage == 13)
	{
		map = new int[size] {

			-3, -3, 81, 81, 98, 99, 86, 87, 94, 95, 86, 87, 98, 99, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 81, 81, 86, 87, 96, 97, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 81, 81, 86, 87, 98, 99, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, 90, 91, 86, 87, 88, 89, 86, 87, 90, 91, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, 92, 93, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 94, 95, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 92, 93, 81, 81, 86, 87, 81, 81, 86, 87, 81, 81, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 94, 95, 81, 81, 86, 87, 81, 81, 86, 87, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 81, 110, -3, -3, 83, 84, -3, -3, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 110, 81, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(13);

	}
	else if (stage == 14)
	{
		map = new int[size] {

			98, 99, 81, 81, 98, 99, 94, 95, 98, 99, 86, 87, 98, 99, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 96, 97, 81, 81, 96, 97, 81, 81, 86, 87, 92, 93, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 98, 99, 81, 81, 98, 99, 81, 81, 86, 87, 94, 95, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				88, 89, 81, -3, -3, 91, 81, 81, 92, 93, 86, 87, 81, 81, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 81, 89, -3, -3, 94, 95, -3, -3, -3, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 81, 92, 93, 81, 81, 81, 81, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, 94, 95, 81, 81, 81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, 81, 81, 88, 89, 81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, -3, -3, -3, -3, 81, 81, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(14);

	}
	else if (stage == 15)
	{
		map = new int[size] {

			88, 89, 86, 87, 81, 81, 86, 87, 94, 95, 86, 87, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				96, 97, 86, 87, 96, 97, 86, 87, 96, 97, 86, 87, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				98, 99, 86, 87, 98, 99, -3, -3, 98, 99, 86, 87, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 92, 93, 86, 87, 90, 91, 86, 87, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 94, 95, 86, 87, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 81, 81, 81, 85, 82, 83, 84, 85, 82, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, -3, -3, 86, 87, 0, 0, 86, 87, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 81, 81, 81, 81, 86, 87, 0, 0, 86, 87, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(15);

	}
	else if (stage == 16)
	{
		map = new int[size] {

			-3, -3, -3, -3, 86, 87, 81, 81, 81, 81, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 86, 87, 81, 81, 81, 81, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 86, 87, 81, 81, 81, 81, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, 81, 81, 81, 81, 81, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 86, 87, 81, 81, 81, 81, -3, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 86, 87, 81, 120, -3, -3, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 86, 87, 110, 81, 81, 81, 81, 81, 86, 87, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 90, 91, -3, -3, 81, 81, 81, 81, 90, 91, 86, 87, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 88, 89, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(16);

	}
	else if (stage == 17)
	{
		map = new int[size] {

			81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				90, 91, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(17);

	}
	else if (stage == 18)
	{
		map = new int[size] {

			94, 95, 81, 81, 88, 89, 81, 81, 110, 81, 81, 81, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				90, 91, 81, 81, 88, 89, 81, 110, 81, 81, 81, 81, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 92, 93, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 94, 95, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 81, 81, -3, -3, -3, -3, 81, 81, 90, 91, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 88, 89, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 81, 81, 90, 91, 81, 81, 90, 91, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(18);

	}
	else if (stage == 19)
	{
		map = new int[size] {

			81, 81, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 0, 0, 86, 87, 254, 255, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 102, 103, 86, 87, 256, 257, 86, 87, 102, 103, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 104, 105, 86, 87, 258, 258, 86, 87, 104, 105, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 104, 105, 86, 87, 258, 258, 86, 87, 104, 105, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 104, 105, 86, 87, 159, 160, 86, 87, 104, 105, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 86, 87, 104, 105, 86, 87, 157, 158, 86, 87, 104, 105, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 104, 105, 86, 87, 155, 156, 86, 87, 104, 105, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, 104, 105, 86, 87, -3, -3, 86, 87, 104, 105, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0,412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(19);

	}
	else if (stage == 20)
	{
		map = new int[size] {

			-3, -3, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 260, 261, 86, 87, 260, 261, 86, 87, 260, 261, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 262, 263, 86, 87, 262, 263, 86, 87, 262, 263, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 262, 263, 86, 87, 262, 263, 86, 87, 262, 263, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 262, 263, 86, 87, 262, 263, 86, 87, 262, 263, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(20);

	}
	else if (stage == 21)
	{
		map = new int[size] {

			259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 82, 83, 84, 85, 82, 83, 84, 81, 81, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 0, 0, 86, 87, 0, 0, 81, 81, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				260, 261, 86, 87, 260, 261, 86, 87, 260, 261, 81, 81, 90, 91, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				262, 263, 86, 87, 262, 263, 86, 87, 262, 263, 81, 81, 88, 89, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				262, 263, 86, 87, 262, 263, 86, 87, 262, 263, 81, 81, 92, 93, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				262, 263, 86, 87, 262, 263, 86, 87, 262, 263, 81, 81, 94, 95, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 81, 81, 81, 81, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 110, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				83, 84, 85, 82, 83, 84, 85, 81, 81, 110, 81, 81, 92, 93, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 86, 87, 0, 0, 81, 81, 110, 81, 81, 81, 94, 95, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		map2 = new int[size] {

			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};
		player->SetStage(21);

	}



	else
	{
		//Error level doesn't exist or incorrect level number
		LOG("Failed to load level, stage %d doesn't exist", stage);
		return AppStatus::ERROR;
	}


	//Entities and objects
	i = 0;
	for (y = 0; y < LEVEL_HEIGHT; ++y)
	{
		for (x = 0; x < LEVEL_WIDTH; ++x)
		{
			tile = (Tile)map[i];
			if (tile == Tile::EMPTY)
			{
				map[i] = 0;
			}

			tile2 = (Tile)map2[i];
			switch (tile2)
			{
			case Tile::EMPTY:
				map2[i] = 0;
				break;
			case Tile::PLAYER:

				if (firstLoad == true)
				{
					pos.x = x * TILE_SIZE;
					pos.y = y * TILE_SIZE + TILE_SIZE - 1;
					firstLoad = false;
					player->SetPos(pos);
				}

				else
				{
					Point posP;
					int right = player->GetHitbox().pos.x + (PLAYER_FRAME_SIZE_X - 64);
					int left = player->GetHitbox().pos.x;
					int top = player->GetHitbox().pos.y + 48;
					int bottom = player->GetHitbox().pos.y;

					if (stage == 4 && right > (WINDOW_WIDTH - 48) && doorEntrance == true)
					{

						posP.x = x * TILE_SIZE;
						posP.y = (player->GetPosY() + 16);
						player->SetPos(posP);
						doorEntrance = false;

					}
					if (right > WINDOW_WIDTH)
					{

						posP.x = x * TILE_SIZE;
						posP.y = player->GetPosY();
						player->SetPos(posP);

					}
					else if (left <= 0)
					{

						posP.x = WINDOW_WIDTH - (PLAYER_FRAME_SIZE_X - 64);
						posP.y = player->GetPosY();
						player->SetPos(posP);

					}
					else if (top < 32)
					{
						posP.x = player->GetPosx();
						posP.y = WINDOW_HEIGHT - 32;
						player->SetPos(posP);

					}
					else if (bottom > WINDOW_HEIGHT)
					{
						posP.x = player->GetPosx();
						posP.y = PLAYER_FRAME_SIZE_Y;
						player->SetPos(posP);

					}

				}

				map2[i] = 0;
				break;
			case Tile::ITEM_HEART:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;

				obj = new Object(pos, ObjectType::HEART);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_RING:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::THE_RING);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_MORNINGSTAR_WHIP:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::MORNINGSTAR_WHIP);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_BATTLE_CROSS:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::BATTLE_CROSS);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_HOURGLASS:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::HOURGLASS);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_HOLY_WATER:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::HOLY_WATER);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_MAGIC_STAFF:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::MAGIC_STAFF);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_BOSS_ORB:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::BOSS_ORB);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_INVULNERABILITY_ORB:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::INVULNERABILITY_ORB);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_CHEST:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::ITEM_CHEST);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_GOLD_KEY:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::GOLD_KEY);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_SILVER_KEY:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::SILVER_KEY);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_SPEED_BOOTS:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::SPEED_BOOTS);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_SHIELD_A:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::SHIELD_A);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_SHIELD_B:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::SHIELD_B);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_BLACK_BIBLE:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::BLACK_BIBLE);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_WHITE_BIBLE:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::WHITE_BIBLE);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_WINGS:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::WINGS);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_SILVER_CROSS:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::SILVER_CROSS);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_WHITE_MONEY_BAG:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::WHITE_MONEY_BAG);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_BLUE_MONEY_BAG:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::BLUE_MONEY_BAG);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_STAGE_MAP:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::STAGE_MAP);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_HEALTH_ORB:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::HEALTH_ORB);
				objects.push_back(obj);
				map2[i] = 0;
				break;
			case Tile::ITEM_GOLD_CROSS:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::GOLD_CROSS);
				objects.push_back(obj);
				map2[i] = 0;
				break;

			case Tile::SOLDIER:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				hitbox = enemies->GetEnemyHitBox(pos, EnemyType::SLIME);
				area = level->GetSweptAreaX(hitbox);
				enemies->Add(pos, EnemyType::SLIME, area);
				break;
			case Tile::MEDUSA:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				hitbox = enemies->GetEnemyHitBox(pos, EnemyType::MEDUSA);
				area = level->GetSweptAreaX(hitbox);
				areaT.height = GetScreenHeight();
				areaT.width = GetScreenWidth()/2;
				areaT.pos.x = x * TILE_SIZE;
				areaT.pos.y = 0;
				enemies->Add(pos, EnemyType::MEDUSA, areaT);
				break;
			case Tile::SKULL_TURRET:
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				hitbox = enemies->GetEnemyHitBox(pos, EnemyType::TURRET);
				area = level->GetSweptAreaX(hitbox);
				areaT.height = GetScreenHeight();
				areaT.width = GetScreenWidth();
				areaT.pos.x = 0;
				areaT.pos.y = 0;
				enemies->Add(pos, EnemyType::TURRET, areaT);
				break;

			default:
				break;
			}
			++i;
		}
	}
	//Tile map
	level->Load(map, LEVEL_WIDTH, LEVEL_HEIGHT);

	delete[] map2;
	delete[] map;

	return AppStatus::OK;
}


void Scene::StageManager(int stage)
{
	Point pos;
	int right = player->GetHitbox().pos.x + (PLAYER_FRAME_SIZE_X - 64);
	int left = player->GetHitbox().pos.x;
	int top = player->GetHitbox().pos.y + 48;
	int bottom = player->GetHitbox().pos.y;

	float w, h;
	w = WINDOW_WIDTH * GAME_SCALE_FACTOR;
	h = WINDOW_HEIGHT * GAME_SCALE_FACTOR;

	dst = { 0, 0, w, h };
	//level 1
	if (stage == 1 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(1, 5, 2, 5, dst);
		LoadLevel(2);

	}
	//level 2
	else if (stage == 2 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(2, 5, 3, 5, dst);
		LoadLevel(3);
	}

	else if (stage == 2 && left < 0)
	{
		fade_transition.SetScene(2, 5, 1, 5, dst);
		LoadLevel(1);

	}
	//level 3
	else if (stage == 3 && right > (WINDOW_WIDTH - 48))
	{
		fade_transition.SetScene(3, 5, 4, 5, dst);
		LoadLevel(4);



	}
	else if (stage == 3 && left < 0)
	{
		fade_transition.SetScene(3, 5, 2, 5, dst);
		LoadLevel(2);

	}
	//level 4
	else if (stage == 4 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(4, 5, 5, 5, dst);
		LoadLevel(5);

	}
	else if (stage == 4 && left < 0)
	{
		fade_transition.SetScene(4, 5, 6, 5, dst);
		LoadLevel(6);

	}

	//level 5
	else if (stage == 5 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(5, 5, 6, 5, dst);
		LoadLevel(6);

	}
	else if (stage == 5 && left < 0)
	{
		fade_transition.SetScene(5, 5, 4, 5, dst);
		LoadLevel(4);

	}
	else if (stage == 5 && top < 32)
	{
		fade_transition.SetScene(5, 5, 8, 5, dst);
		LoadLevel(8);

	}

	//level 6
	else if (stage == 6 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(6, 5, 4, 5, dst);
		LoadLevel(4);

	}
	else if (stage == 6 && left < 0)
	{
		fade_transition.SetScene(6, 5, 5, 5, dst);
		LoadLevel(5);

	}
	else if (stage == 6 && top < 32)
	{
		fade_transition.SetScene(6, 5, 9, 5, dst);
		LoadLevel(9);

	}
	//level 7
	else if (stage == 7 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(7, 5, 8, 5, dst);
		LoadLevel(8);
	}
	else if (stage == 7 && left < 0)
	{
		fade_transition.SetScene(7, 5, 12, 5, dst);
		LoadLevel(12);
	}
	else if (stage == 7 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(7, 5, 4, 5, dst);
		LoadLevel(4);
	}
	//level 8
	else if (stage == 8 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(8, 5, 9, 5, dst);
		LoadLevel(9);
	}
	else if (stage == 8 && left < 0)
	{
		fade_transition.SetScene(8, 5, 7, 5, dst);
		LoadLevel(7);
	}
	else if (stage == 8 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(8, 5, 5, 5, dst);
		LoadLevel(5);
	}
	//level 9
	else if (stage == 9 && left < 0)
	{
		fade_transition.SetScene(9, 5, 8, 5, dst);
		LoadLevel(8);
	}
	else if (stage == 9 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(9, 5, 6, 5, dst);
		LoadLevel(6);
	}
	//level 12
	else if (stage == 12 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(12, 5, 7, 5, dst);
		LoadLevel(7);
	}
	else if (stage == 12 && left < 0)
	{
		fade_transition.SetScene(12, 5, 11, 5, dst);
		LoadLevel(11);
	}
	else if (stage == 12 && bottom > WINDOW_HEIGHT)
	{
		player->SetLifes(0);
	}
	//level 11
	else if (stage == 11 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(11, 5, 12, 5, dst);
		LoadLevel(12);
	}
	else if (stage == 11 && left < 0)
	{
		fade_transition.SetScene(11, 5, 10, 5, dst);
		LoadLevel(10);
	}
	else if (stage == 11 && bottom > WINDOW_HEIGHT)
	{
		player->SetLifes(0);
	}
	//level 10
	else if (stage == 10 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(10, 5, 11, 5, dst);
		LoadLevel(11);
	}

	else if (stage == 10 && bottom > WINDOW_HEIGHT)
	{
		player->SetLifes(0);
	}
	else if (stage == 10 && top < 32)
	{
		fade_transition.SetScene(10, 5, 13, 5, dst);
		LoadLevel(13);

	}
	//level 13
	else if (stage == 13 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(13, 5, 14, 5, dst);
		LoadLevel(14);
	}
	else if (stage == 13 && left < 0)
	{
		fade_transition.SetScene(13, 5, 18, 5, dst);
		LoadLevel(18);
	}
	else if (stage == 13 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(13, 5, 10, 5, dst);
		LoadLevel(10);
	}
	//level 14
	else if (stage == 14 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(14, 5, 15, 5, dst);
		LoadLevel(15);
	}
	else if (stage == 14 && left < 0)
	{
		fade_transition.SetScene(14, 5, 13, 5, dst);
		LoadLevel(13);
	}
	else if (stage == 14 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(14, 5, 11, 5, dst);
		LoadLevel(11);
	}
	//level 15
	else if (stage == 15 && left < 0)
	{
		fade_transition.SetScene(15, 5, 14, 5, dst);
		LoadLevel(14);
	}
	else if (stage == 15 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(15, 5, 12, 5, dst);
		LoadLevel(12);
	}
	//level 16
	else if (stage == 16 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(16, 5, 17, 5, dst);
		LoadLevel(17);
	}
	else if (stage == 16 && bottom > WINDOW_HEIGHT)
	{
		player->SetLifes(0);
	}

	//level 17
	else if (stage == 17 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(17, 5, 18, 5, dst);
		LoadLevel(18);
	}
	else if (stage == 17 && left < 0)
	{
		fade_transition.SetScene(17, 5, 16, 5, dst);
		LoadLevel(16);
	}
	else if (stage == 17 && bottom > WINDOW_HEIGHT)
	{
		player->SetLifes(0);
	}
	//level 18
	else if (stage == 18 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(18, 5, 13, 5, dst);
		LoadLevel(13);
	}
	else if (stage == 18 && left < 0)
	{
		fade_transition.SetScene(18, 5, 17, 5, dst);
		LoadLevel(17);
	}
	else if (stage == 18 && bottom > WINDOW_HEIGHT)
	{
		player->SetLifes(0);
	}
	else if (stage == 18 && top < 32)
	{
		fade_transition.SetScene(18, 5, 21, 5, dst);
		LoadLevel(21);

	}
	//level 19
	else if (stage == 19 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(19, 5, 20, 5, dst);
		LoadLevel(20);
	}
	//level 20
	else if (stage == 20 && right > WINDOW_WIDTH)
	{
		fade_transition.SetScene(20, 5, 21, 5, dst);
		LoadLevel(21);
	}
	else if (stage == 20 && left < 0)
	{
		fade_transition.SetScene(20, 5, 19, 5, dst);
		LoadLevel(19);
	}
	//level 21
	else if (stage == 21 && left < 0)
	{
		fade_transition.SetScene(21, 5, 20, 5, dst);
		LoadLevel(20);
	}
	else if (stage == 21 && bottom > WINDOW_HEIGHT)
	{
		fade_transition.SetScene(21, 5, 18, 5, dst);
		LoadLevel(18);
	}

}
void Scene::Update()
{
	if (fade_transition.IsActive() == true)
	{
		fade_transition.Update();
	}
	Point p1, p2, posP;
	AABB box;
	Point p;

	//Switch between the different debug modes: off, on (sprites & hitboxes), on (hitboxes) 
	if (IsKeyPressed(KEY_F1)) { debug = (DebugMode)(((int)debug + 1) % (int)DebugMode::SIZE); }
	//Debug levels instantly
	if (IsKeyPressed(KEY_F1)) { debug = (DebugMode)(((int)debug + 1) % (int)DebugMode::SIZE); }
	else if (IsKeyPressed(KEY_ZERO)) { LoadLevel(0); }
	else if (IsKeyPressed(KEY_ONE)) { LoadLevel(1); }
	else if (IsKeyPressed(KEY_TWO)) { LoadLevel(2); }
	else if (IsKeyPressed(KEY_THREE)) { LoadLevel(3); }
	else if (IsKeyPressed(KEY_FOUR)) { LoadLevel(4); }
	else if (IsKeyPressed(KEY_FIVE)) { LoadLevel(5); }
	else if (IsKeyPressed(KEY_SIX)) { LoadLevel(6); }
	else if (IsKeyPressed(KEY_SEVEN)) { LoadLevel(7); }
	else if (IsKeyPressed(KEY_EIGHT)) { LoadLevel(8); }
	else if (IsKeyPressed(KEY_NINE)) { LoadLevel(9); }
	else if (IsKeyPressed(KEY_Z)) { LoadLevel(10); }
	else if (IsKeyPressed(KEY_X)) { LoadLevel(11); }
	else if (IsKeyPressed(KEY_C)) { LoadLevel(12); }
	else if (IsKeyPressed(KEY_V)) { LoadLevel(13); }
	else if (IsKeyPressed(KEY_B)) { LoadLevel(14); }
	else if (IsKeyPressed(KEY_N)) { LoadLevel(15); }
	else if (IsKeyPressed(KEY_Q)) { LoadLevel(16); }
	else if (IsKeyPressed(KEY_E)) { LoadLevel(17); }
	else if (IsKeyPressed(KEY_R)) { LoadLevel(18); }
	else if (IsKeyPressed(KEY_T)) { LoadLevel(19); }
	else if (IsKeyPressed(KEY_Y)) { LoadLevel(20); }
	else if (IsKeyPressed(KEY_U)) { LoadLevel(21); }

	//Take out lives and die manually

	if ((player->GetStage() == 1 || player->GetStage() == 2 || player->GetStage() == 3)
		&& IsKeyPressed(KEY_M) && player->GetLives() > 0)
	{
		player->SetHp(0);
		player->Update();
		player->SetLifes(player->GetLives() - 1);
		player->SetHp(100);
		LoadLevel(1);

	}
	else if ((player->GetStage() == 4 || player->GetStage() == 5 || player->GetStage() == 6)
		&& IsKeyPressed(KEY_M) && player->GetLives() > 0)
	{
		player->SetHp(0);
		player->Update();
		player->SetLifes(player->GetLives() - 1);
		player->SetHp(100);
		LoadLevel(4);

	}


	//natural death
	if (player->GetHp() <= 0)
	{


		if ((player->GetStage() == 1 || player->GetStage() == 2 || player->GetStage() == 3)
			&& player->GetLives() > 0)
		{

			player->Update();
			player->SetLifes(player->GetLives() - 1);
			player->SetHp(100);


			LoadLevel(1);




		}
		else if ((player->GetStage() == 4 || player->GetStage() == 5 || player->GetStage() == 6)
			&& player->GetLives() > 0)
		{
			player->Update();
			player->SetLifes(player->GetLives() - 1);
			player->SetHp(100);

			LoadLevel(4);

		}

	}

	StageManager(player->GetStage());
	level->Update();
	player->Update();

	box = player->GetHitbox();
	enemies->Update(box);
	shots->Update(box);

	if (player->GetStage() == 1 || player->GetStage() == 2 || player->GetStage() == 3)
	{
		data.StartMusic(ResourceAudio::MUSIC_VAMPIREKILLER);

	}
	else if (player->GetStage() >= 4 && player->GetStage() <= 21 && player->GetStage() != 19)
	{
		data.StartMusic(ResourceAudio::MUSIC_STARKER);
	}
	else if (player->GetStage() == 19)
	{
		data.StartMusic(ResourceAudio::MUSIC_BOSS);
	}


	CheckCollisions();
}
void Scene::Render()
{
	BeginMode2D(camera);

	level->Render();


	if (debug == DebugMode::OFF || debug == DebugMode::SPRITES_AND_HITBOXES)
	{
		RenderObjects();
		player->Draw();
		enemies->Draw();
		shots->Draw();

	}
	if (debug == DebugMode::SPRITES_AND_HITBOXES || debug == DebugMode::ONLY_HITBOXES)
	{
		RenderObjectsDebug(YELLOW);
		player->DrawDebug(GREEN);
		enemies->DrawDebug();
		shots->DrawDebug(GRAY);

	}
	if (fade_transition.IsActive()) fade_transition.Render();

	EndMode2D();

	RenderGUI();
}
void Scene::Release()
{
	level->Release();
	player->Release();
	ClearLevel();
}
void Scene::CheckCollisions()
{
	AABB player_box, obj_box, soldier_box, whip_box;

	player_box = player->GetHitbox();
	whip_box = player->GetWhipHitbox();
	
	auto it = objects.begin();


	while (it != objects.end())
	{

		obj_box = (*it)->GetHitbox();

		if (player_box.TestAABB(soldier_box) && player->GetLives() != 0 )
		{
			player->SetLifes(player->GetLives() - 1);

		}
		if (player_box.TestAABB(obj_box))
		{
			switch ((*it)->GetType())
			{
			
			case ObjectType::HEART:
				data.LoadSound(ResourceAudio::SOUND_HEART, "Images/Heart.wav");
				data.StartSound(ResourceAudio::SOUND_HEART);
				player->IncrLifes((*it)->Points());

				//Delete the object
				delete* it;
				//Erase the object from the vector and get the iterator to the next valid element
				it = objects.erase(it);
				break;
			case ObjectType::THE_RING:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);
				player->SetWin(true);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::MORNINGSTAR_WHIP:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::BATTLE_CROSS:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::HOURGLASS:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::HOLY_WATER:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::MAGIC_STAFF:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::BOSS_ORB:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::INVULNERABILITY_ORB:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::ITEM_CHEST:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::GOLD_KEY:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::SILVER_KEY:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);
				
				player->SetKey(true);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::SPEED_BOOTS:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::SHIELD_A:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::SHIELD_B:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::BLACK_BIBLE:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::WHITE_BIBLE:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::WINGS:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::SILVER_CROSS:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::WHITE_MONEY_BAG:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::BLUE_MONEY_BAG:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::STAGE_MAP:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::HEALTH_ORB:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			case ObjectType::GOLD_CROSS:
				data.LoadSound(ResourceAudio::SOUND_ITEM, "Images/Item.wav");
				data.StartSound(ResourceAudio::SOUND_ITEM);

				delete* it;
				it = objects.erase(it);
				break;
			default:
				break;
			}
		}

		else
		{
			//Move to the next object
			++it;
		}
	}

	enemies->CheckCollisions(whip_box);

}
void Scene::ClearLevel()
{
	Point p;
	p.x = WINDOW_WIDTH + 400;
	p.y = 0;
	for (Object* obj : objects)
	{
		delete obj;
	}
	objects.clear();
	for (Object* obj : objects2)
	{
		delete obj;
	}
	objects2.clear();

	enemies->Release();
	shots->Clear();

}
void Scene::RenderObjects() const
{
	for (Object* obj : objects)
	{
		obj->Draw();
	}
	for (Object* obj : objects2)
	{
		obj->Draw();
	}
}
void Scene::RenderObjectsDebug(const Color& col) const
{
	for (Object* obj : objects)
	{
		obj->DrawDebug(col);
	}
}
void Scene::RenderGUI() const
{
	
	if (player->GetScore() < 10)
	{
		font->Draw(10, 1, TextFormat("SCORE-00000%d", player->GetScore()));

	}
	else if (player->GetScore() < 100)
	{
		font->Draw(10, 1, TextFormat("SCORE-0000%d", player->GetScore()));

	}
	else if (player->GetScore() < 1000)
	{
		font->Draw(10, 1, TextFormat("SCORE-000%d", player->GetScore()));

	}
	font->Draw(180, 1, TextFormat("@-%d", player->GetLives()));
	font->Draw(10, 11, TextFormat("PLAYER %d", player->GetHp()));
	font->Draw(10, 21, TextFormat("ENEMY %d", 0));
	if (player->GetStage() < 10)
	{
		font->Draw(110, 1, TextFormat("STAGE-0%d", player->GetStage()));
	}
	else
	{
		font->Draw(110, 1, TextFormat("STAGE-%d", player->GetStage()));

	}

	
	font->Draw(210, 1, TextFormat("P-02"));


}
